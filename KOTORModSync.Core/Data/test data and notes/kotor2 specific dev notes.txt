todo list:
Add preinstall screen where users can select the options/components they want.
Integrate Options dialog to allow the user to choose customization options
- Send Option dialog callback to ExecuteInstructions
- Use existing code to parse the archive hierarchy to generate options dynamically when applicable.
  -- Add the relevant code to link up the Source of an Option to the archive
- Use existing code from Instruction to implement GUID checks for Dependencies/Restrictions

Implement method of validating source and destination keys in Instruction in real time. The problem with this is archives can be so large it can seriously slow down the app. At the very least we could implement 


  <!-- are we in publish? -->
  <PropertyGroup>
    <PublishDependsOn>InBeforePublish;$(PublishDependsOn);InAfterPublish</PublishDependsOn>
  </PropertyGroup>

  <Target Name="InBeforePublish" BeforeTargets="PreBuildEvent" >
    <PropertyGroup>
      <DetectPublishBuild>true</DetectPublishBuild>
    </PropertyGroup>
    <Message Text=" ## InBeforePublish  ------->  DetectPublishBuild: $(DetectPublishBuild)" Importance="High" />
  </Target>

  <Target Name="InAfterPublish" AfterTargets="PostBuildEvent" >
    <PropertyGroup>
      <DetectPublishBuild>false</DetectPublishBuild>
    </PropertyGroup>
    <Message Text=" ## InAfterPublish  -------> DetectPublishBuild: $(DetectPublishBuild)" Importance="High" />
  </Target>


  <!-- Publish settings -->
  <PropertyGroup Condition="'$(DetectPublishBuild)' != 'true' AND '$(Configuration)' == 'Release'">
    <Platform>x64</Platform>
    <PublishDir>$(ProjectDir)\bin\Publish</PublishDir>
    <PublishProtocol>FileSystem</PublishProtocol>
    <_TargetId>Folder</_TargetId>
    <PublishSingleFile>true</PublishSingleFile>
    <PublishReadyToRun>true</PublishReadyToRun>
    <RuntimeIdentifiers>win-x86;win-x64;win7-x64;osx-x64;linux-x64</RuntimeIdentifiers>
  </PropertyGroup>
